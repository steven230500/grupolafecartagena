name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: grupo-la-fe

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy remoto (escribe archivos y levanta)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            echo "=== DEBUG: Variables ==="
            echo "SSH_HOST: $SSH_HOST"
            echo "SSH_USER: $SSH_USER"
            echo "SERVER_PATH: $SERVER_PATH"
            echo "REGISTRY: $REGISTRY"
            echo "OWNER: $OWNER"
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "========================"

            # Instalar Docker si falta
            docker --version || curl -fsSL https://get.docker.com | sh

            # Asegurar "docker compose" o "docker-compose"
            if docker compose version >/dev/null 2>&1; then
              COMPOSE="docker compose"
            else
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              COMPOSE="docker-compose"
            fi

            # Carpeta de deploy
            echo "=== DEBUG: Creando directorio ${{ secrets.SERVER_PATH }} ==="
            mkdir -p ${{ secrets.SERVER_PATH }}
            cd ${{ secrets.SERVER_PATH }}
            echo "Directorio actual: $(pwd)"
            echo "Contenido del directorio:"
            ls -la
            echo "=================================="

            # docker-compose.yml (solo app, sin Caddy)
            cat > docker-compose.yml <<'COMPOSE'
            services:
              app:
                image: ${IMAGE_NAME:-ghcr.io/'${{ github.repository_owner }}'/grupo-la-fe:latest}
                container_name: grupo-la-fe-app
                env_file: .env
                restart: unless-stopped
                networks:
                  - infra_infra_network

            networks:
              infra_infra_network:
                external: true
            COMPOSE

            # .env (runtime)
            echo "=== DEBUG: Variables de entorno ==="
            echo "CONTACT_TO: ${{ secrets.CONTACT_TO }}"
            echo "CONTACT_FROM: ${{ secrets.CONTACT_FROM }}"
            echo "RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}"
            echo "NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}"
            echo "=================================="

            cat > .env <<'ENVVARS'
            CONTACT_TO=${{ secrets.CONTACT_TO }}
            CONTACT_FROM=${{ secrets.CONTACT_FROM }}
            RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
            NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
            ENVVARS

            echo "=== DEBUG: Archivo .env creado ==="
            cat .env
            echo "=================================="

            # Login al registry y levantar
            echo "=== DEBUG: Docker operations ==="
            echo "Logging into GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            export IMAGE_NAME=${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest
            echo "IMAGE_NAME: $IMAGE_NAME"

            echo "Pulling image..."
            $COMPOSE pull

            echo "Starting containers..."
            $COMPOSE up -d --remove-orphans

            echo "=== Archivos ==="; ls -la
            echo "=== Estado ==="; $COMPOSE ps
            echo "=== DEBUG: Finalizado ==="